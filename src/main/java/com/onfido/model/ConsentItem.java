/*
 * Onfido API v3.6
 * The Onfido API
 *
 * The version of the OpenAPI document: 3.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.onfido.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.onfido.JSON;


/**
 * The applicant&#39;s consents
 */
@JsonPropertyOrder({
  ConsentItem.JSON_PROPERTY_NAME,
  ConsentItem.JSON_PROPERTY_GRANTED
})
@JsonTypeName("Consent_item")
@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class ConsentItem {
  /**
   * Gets or Sets name
   */
  public enum NameEnum {
    PRIVACY_NOTICES_READ("privacy_notices_read"),
    
    SSN_VERIFICATION("ssn_verification"),
    
    PHONE_NUMBER_VERIFICATION("phone_number_verification"),
    
    UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");

    private String value;

    NameEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static NameEnum fromValue(String value) {
      for (NameEnum b : NameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }
  }

  public static final String JSON_PROPERTY_NAME = "name";
  private NameEnum name;

  public static final String JSON_PROPERTY_GRANTED = "granted";
  private Boolean granted;

  public ConsentItem() { 
  }

  public ConsentItem name(NameEnum name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public NameEnum getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(NameEnum name) {
    this.name = name;
  }


  public ConsentItem granted(Boolean granted) {
    this.granted = granted;
    return this;
  }

   /**
   * Get granted
   * @return granted
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_GRANTED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getGranted() {
    return granted;
  }


  @JsonProperty(JSON_PROPERTY_GRANTED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setGranted(Boolean granted) {
    this.granted = granted;
  }


  /**
   * Return true if this Consent_item object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConsentItem consentItem = (ConsentItem) o;
    return Objects.equals(this.name, consentItem.name) &&
        Objects.equals(this.granted, consentItem.granted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, granted);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConsentItem {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    granted: ").append(toIndentedString(granted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

