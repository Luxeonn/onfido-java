/*
 * Onfido API v3.6
 * The Onfido API
 *
 * The version of the OpenAPI document: 3.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.onfido.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.onfido.model.AddressBuilder;
import com.onfido.model.ConsentsBuilder;
import com.onfido.model.LocationBuilder;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.onfido.JSON;


/**
 * ApplicantRequest
 */
@JsonPropertyOrder({
  ApplicantRequest.JSON_PROPERTY_CONSENTS,
  ApplicantRequest.JSON_PROPERTY_ADDRESS,
  ApplicantRequest.JSON_PROPERTY_LOCATION
})
@JsonTypeName("applicant_request")
@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ApplicantRequest {
  public static final String JSON_PROPERTY_CONSENTS = "consents";
  private ConsentsBuilder consents;

  public static final String JSON_PROPERTY_ADDRESS = "address";
  private AddressBuilder address;

  public static final String JSON_PROPERTY_LOCATION = "location";
  private LocationBuilder location;

  public ApplicantRequest() { 
  }

  public ApplicantRequest consents(ConsentsBuilder consents) {
    this.consents = consents;
    return this;
  }

   /**
   * Get consents
   * @return consents
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONSENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ConsentsBuilder getConsents() {
    return consents;
  }


  @JsonProperty(JSON_PROPERTY_CONSENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConsents(ConsentsBuilder consents) {
    this.consents = consents;
  }


  public ApplicantRequest address(AddressBuilder address) {
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AddressBuilder getAddress() {
    return address;
  }


  @JsonProperty(JSON_PROPERTY_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAddress(AddressBuilder address) {
    this.address = address;
  }


  public ApplicantRequest location(LocationBuilder location) {
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOCATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LocationBuilder getLocation() {
    return location;
  }


  @JsonProperty(JSON_PROPERTY_LOCATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLocation(LocationBuilder location) {
    this.location = location;
  }


  /**
   * Return true if this applicant_request object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicantRequest applicantRequest = (ApplicantRequest) o;
    return Objects.equals(this.consents, applicantRequest.consents) &&
        Objects.equals(this.address, applicantRequest.address) &&
        Objects.equals(this.location, applicantRequest.location);
  }

  @Override
  public int hashCode() {
    return Objects.hash(consents, address, location);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicantRequest {\n");
    sb.append("    consents: ").append(toIndentedString(consents)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

