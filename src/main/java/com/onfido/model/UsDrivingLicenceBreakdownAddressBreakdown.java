/*
 * Onfido API v3.6
 * The Onfido API
 *
 * The version of the OpenAPI document: 3.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.onfido.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.onfido.model.DocumentBreakdownDataComparisonBreakdownIssuingCountry;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.onfido.JSON;


/**
 * UsDrivingLicenceBreakdownAddressBreakdown
 */
@JsonPropertyOrder({
  UsDrivingLicenceBreakdownAddressBreakdown.JSON_PROPERTY_CITY,
  UsDrivingLicenceBreakdownAddressBreakdown.JSON_PROPERTY_LINE1,
  UsDrivingLicenceBreakdownAddressBreakdown.JSON_PROPERTY_LINE2,
  UsDrivingLicenceBreakdownAddressBreakdown.JSON_PROPERTY_STATE_CODE,
  UsDrivingLicenceBreakdownAddressBreakdown.JSON_PROPERTY_ZIP4,
  UsDrivingLicenceBreakdownAddressBreakdown.JSON_PROPERTY_ZIP5
})
@JsonTypeName("us_driving_licence_breakdown_address_breakdown")
@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class UsDrivingLicenceBreakdownAddressBreakdown {
  public static final String JSON_PROPERTY_CITY = "city";
  private DocumentBreakdownDataComparisonBreakdownIssuingCountry city;

  public static final String JSON_PROPERTY_LINE1 = "line_1";
  private DocumentBreakdownDataComparisonBreakdownIssuingCountry line1;

  public static final String JSON_PROPERTY_LINE2 = "line_2";
  private DocumentBreakdownDataComparisonBreakdownIssuingCountry line2;

  public static final String JSON_PROPERTY_STATE_CODE = "state_code";
  private DocumentBreakdownDataComparisonBreakdownIssuingCountry stateCode;

  public static final String JSON_PROPERTY_ZIP4 = "zip4";
  private DocumentBreakdownDataComparisonBreakdownIssuingCountry zip4;

  public static final String JSON_PROPERTY_ZIP5 = "zip5";
  private DocumentBreakdownDataComparisonBreakdownIssuingCountry zip5;

  public UsDrivingLicenceBreakdownAddressBreakdown() { 
  }

  public UsDrivingLicenceBreakdownAddressBreakdown city(DocumentBreakdownDataComparisonBreakdownIssuingCountry city) {
    this.city = city;
    return this;
  }

   /**
   * Get city
   * @return city
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DocumentBreakdownDataComparisonBreakdownIssuingCountry getCity() {
    return city;
  }


  @JsonProperty(JSON_PROPERTY_CITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCity(DocumentBreakdownDataComparisonBreakdownIssuingCountry city) {
    this.city = city;
  }


  public UsDrivingLicenceBreakdownAddressBreakdown line1(DocumentBreakdownDataComparisonBreakdownIssuingCountry line1) {
    this.line1 = line1;
    return this;
  }

   /**
   * Get line1
   * @return line1
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LINE1)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DocumentBreakdownDataComparisonBreakdownIssuingCountry getLine1() {
    return line1;
  }


  @JsonProperty(JSON_PROPERTY_LINE1)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLine1(DocumentBreakdownDataComparisonBreakdownIssuingCountry line1) {
    this.line1 = line1;
  }


  public UsDrivingLicenceBreakdownAddressBreakdown line2(DocumentBreakdownDataComparisonBreakdownIssuingCountry line2) {
    this.line2 = line2;
    return this;
  }

   /**
   * Get line2
   * @return line2
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LINE2)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DocumentBreakdownDataComparisonBreakdownIssuingCountry getLine2() {
    return line2;
  }


  @JsonProperty(JSON_PROPERTY_LINE2)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLine2(DocumentBreakdownDataComparisonBreakdownIssuingCountry line2) {
    this.line2 = line2;
  }


  public UsDrivingLicenceBreakdownAddressBreakdown stateCode(DocumentBreakdownDataComparisonBreakdownIssuingCountry stateCode) {
    this.stateCode = stateCode;
    return this;
  }

   /**
   * Get stateCode
   * @return stateCode
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STATE_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DocumentBreakdownDataComparisonBreakdownIssuingCountry getStateCode() {
    return stateCode;
  }


  @JsonProperty(JSON_PROPERTY_STATE_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStateCode(DocumentBreakdownDataComparisonBreakdownIssuingCountry stateCode) {
    this.stateCode = stateCode;
  }


  public UsDrivingLicenceBreakdownAddressBreakdown zip4(DocumentBreakdownDataComparisonBreakdownIssuingCountry zip4) {
    this.zip4 = zip4;
    return this;
  }

   /**
   * Get zip4
   * @return zip4
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ZIP4)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DocumentBreakdownDataComparisonBreakdownIssuingCountry getZip4() {
    return zip4;
  }


  @JsonProperty(JSON_PROPERTY_ZIP4)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setZip4(DocumentBreakdownDataComparisonBreakdownIssuingCountry zip4) {
    this.zip4 = zip4;
  }


  public UsDrivingLicenceBreakdownAddressBreakdown zip5(DocumentBreakdownDataComparisonBreakdownIssuingCountry zip5) {
    this.zip5 = zip5;
    return this;
  }

   /**
   * Get zip5
   * @return zip5
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ZIP5)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DocumentBreakdownDataComparisonBreakdownIssuingCountry getZip5() {
    return zip5;
  }


  @JsonProperty(JSON_PROPERTY_ZIP5)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setZip5(DocumentBreakdownDataComparisonBreakdownIssuingCountry zip5) {
    this.zip5 = zip5;
  }


  /**
   * Return true if this us_driving_licence_breakdown_address_breakdown object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UsDrivingLicenceBreakdownAddressBreakdown usDrivingLicenceBreakdownAddressBreakdown = (UsDrivingLicenceBreakdownAddressBreakdown) o;
    return Objects.equals(this.city, usDrivingLicenceBreakdownAddressBreakdown.city) &&
        Objects.equals(this.line1, usDrivingLicenceBreakdownAddressBreakdown.line1) &&
        Objects.equals(this.line2, usDrivingLicenceBreakdownAddressBreakdown.line2) &&
        Objects.equals(this.stateCode, usDrivingLicenceBreakdownAddressBreakdown.stateCode) &&
        Objects.equals(this.zip4, usDrivingLicenceBreakdownAddressBreakdown.zip4) &&
        Objects.equals(this.zip5, usDrivingLicenceBreakdownAddressBreakdown.zip5);
  }

  @Override
  public int hashCode() {
    return Objects.hash(city, line1, line2, stateCode, zip4, zip5);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UsDrivingLicenceBreakdownAddressBreakdown {\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    line1: ").append(toIndentedString(line1)).append("\n");
    sb.append("    line2: ").append(toIndentedString(line2)).append("\n");
    sb.append("    stateCode: ").append(toIndentedString(stateCode)).append("\n");
    sb.append("    zip4: ").append(toIndentedString(zip4)).append("\n");
    sb.append("    zip5: ").append(toIndentedString(zip5)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

