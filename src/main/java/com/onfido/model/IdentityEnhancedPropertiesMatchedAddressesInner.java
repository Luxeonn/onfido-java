/*
 * Onfido API v3.6
 * The Onfido API
 *
 * The version of the OpenAPI document: 3.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.onfido.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.onfido.JSON;


/**
 * IdentityEnhancedPropertiesMatchedAddressesInner
 */
@JsonPropertyOrder({
  IdentityEnhancedPropertiesMatchedAddressesInner.JSON_PROPERTY_ID,
  IdentityEnhancedPropertiesMatchedAddressesInner.JSON_PROPERTY_MATCH_TYPES
})
@JsonTypeName("identity_enhanced_properties_matched_addresses_inner")
@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class IdentityEnhancedPropertiesMatchedAddressesInner {
  public static final String JSON_PROPERTY_ID = "id";
  private BigDecimal id;

  public static final String JSON_PROPERTY_MATCH_TYPES = "match_types";
  private List<String> matchTypes;

  public IdentityEnhancedPropertiesMatchedAddressesInner() { 
  }

  public IdentityEnhancedPropertiesMatchedAddressesInner id(BigDecimal id) {
    this.id = id;
    return this;
  }

   /**
   * The address number.
   * @return id
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(BigDecimal id) {
    this.id = id;
  }


  public IdentityEnhancedPropertiesMatchedAddressesInner matchTypes(List<String> matchTypes) {
    this.matchTypes = matchTypes;
    return this;
  }

  public IdentityEnhancedPropertiesMatchedAddressesInner addMatchTypesItem(String matchTypesItem) {
    if (this.matchTypes == null) {
      this.matchTypes = new ArrayList<>();
    }
    this.matchTypes.add(matchTypesItem);
    return this;
  }

   /**
   * Sources which contain matched addresses.
   * @return matchTypes
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MATCH_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getMatchTypes() {
    return matchTypes;
  }


  @JsonProperty(JSON_PROPERTY_MATCH_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMatchTypes(List<String> matchTypes) {
    this.matchTypes = matchTypes;
  }


  /**
   * Return true if this identity_enhanced_properties_matched_addresses_inner object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IdentityEnhancedPropertiesMatchedAddressesInner identityEnhancedPropertiesMatchedAddressesInner = (IdentityEnhancedPropertiesMatchedAddressesInner) o;
    return Objects.equals(this.id, identityEnhancedPropertiesMatchedAddressesInner.id) &&
        Objects.equals(this.matchTypes, identityEnhancedPropertiesMatchedAddressesInner.matchTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, matchTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IdentityEnhancedPropertiesMatchedAddressesInner {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    matchTypes: ").append(toIndentedString(matchTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

