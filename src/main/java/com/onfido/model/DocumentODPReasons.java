/*
 * Onfido API v3.6
 * The Onfido API
 *
 * The version of the OpenAPI document: 3.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.onfido.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.onfido.JSON;


/**
 * DocumentODPReasons
 */
@JsonPropertyOrder({
  DocumentODPReasons.JSON_PROPERTY_PHOTO_OF_SCREEN,
  DocumentODPReasons.JSON_PROPERTY_SCREENSHOT,
  DocumentODPReasons.JSON_PROPERTY_DOCUMENT_ON_PRINTED_PAPER,
  DocumentODPReasons.JSON_PROPERTY_SCAN
})
@JsonTypeName("document_ODP_reasons")
@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class DocumentODPReasons {
  public static final String JSON_PROPERTY_PHOTO_OF_SCREEN = "photo_of_screen";
  private String photoOfScreen;

  public static final String JSON_PROPERTY_SCREENSHOT = "screenshot";
  private String screenshot;

  public static final String JSON_PROPERTY_DOCUMENT_ON_PRINTED_PAPER = "document_on_printed_paper";
  private String documentOnPrintedPaper;

  public static final String JSON_PROPERTY_SCAN = "scan";
  private String scan;

  public DocumentODPReasons() { 
  }

  public DocumentODPReasons photoOfScreen(String photoOfScreen) {
    this.photoOfScreen = photoOfScreen;
    return this;
  }

   /**
   * When the applicant&#39;s document is on a physical screen or device.
   * @return photoOfScreen
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PHOTO_OF_SCREEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPhotoOfScreen() {
    return photoOfScreen;
  }


  @JsonProperty(JSON_PROPERTY_PHOTO_OF_SCREEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPhotoOfScreen(String photoOfScreen) {
    this.photoOfScreen = photoOfScreen;
  }


  public DocumentODPReasons screenshot(String screenshot) {
    this.screenshot = screenshot;
    return this;
  }

   /**
   * When the applicant has used their mobile phone, tablet, or computer to take a photo within the device.
   * @return screenshot
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SCREENSHOT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getScreenshot() {
    return screenshot;
  }


  @JsonProperty(JSON_PROPERTY_SCREENSHOT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScreenshot(String screenshot) {
    this.screenshot = screenshot;
  }


  public DocumentODPReasons documentOnPrintedPaper(String documentOnPrintedPaper) {
    this.documentOnPrintedPaper = documentOnPrintedPaper;
    return this;
  }

   /**
   * When the applicant has previously captured an image of the document, printed it out, and has now taken a photo of this print out to upload.
   * @return documentOnPrintedPaper
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DOCUMENT_ON_PRINTED_PAPER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDocumentOnPrintedPaper() {
    return documentOnPrintedPaper;
  }


  @JsonProperty(JSON_PROPERTY_DOCUMENT_ON_PRINTED_PAPER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDocumentOnPrintedPaper(String documentOnPrintedPaper) {
    this.documentOnPrintedPaper = documentOnPrintedPaper;
  }


  public DocumentODPReasons scan(String scan) {
    this.scan = scan;
    return this;
  }

   /**
   * When the document has clearly been captured using a scanner and there are visible indicators of this
   * @return scan
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SCAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getScan() {
    return scan;
  }


  @JsonProperty(JSON_PROPERTY_SCAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScan(String scan) {
    this.scan = scan;
  }


  /**
   * Return true if this document_ODP_reasons object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentODPReasons documentODPReasons = (DocumentODPReasons) o;
    return Objects.equals(this.photoOfScreen, documentODPReasons.photoOfScreen) &&
        Objects.equals(this.screenshot, documentODPReasons.screenshot) &&
        Objects.equals(this.documentOnPrintedPaper, documentODPReasons.documentOnPrintedPaper) &&
        Objects.equals(this.scan, documentODPReasons.scan);
  }

  @Override
  public int hashCode() {
    return Objects.hash(photoOfScreen, screenshot, documentOnPrintedPaper, scan);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentODPReasons {\n");
    sb.append("    photoOfScreen: ").append(toIndentedString(photoOfScreen)).append("\n");
    sb.append("    screenshot: ").append(toIndentedString(screenshot)).append("\n");
    sb.append("    documentOnPrintedPaper: ").append(toIndentedString(documentOnPrintedPaper)).append("\n");
    sb.append("    scan: ").append(toIndentedString(scan)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

