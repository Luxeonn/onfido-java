/*
 * Onfido API v3.6
 * The Onfido API
 *
 * The version of the OpenAPI document: 3.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.onfido.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.onfido.model.CountryCodes;
import java.util.Arrays;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.onfido.JSON;


/**
 * DocumentShared
 */
@JsonPropertyOrder({
  DocumentShared.JSON_PROPERTY_FILE_TYPE,
  DocumentShared.JSON_PROPERTY_TYPE,
  DocumentShared.JSON_PROPERTY_SIDE,
  DocumentShared.JSON_PROPERTY_ISSUING_COUNTRY,
  DocumentShared.JSON_PROPERTY_APPLICANT_ID
})
@JsonTypeName("document_shared")
@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class DocumentShared {
  /**
   * The file type of the uploaded file
   */
  public enum FileTypeEnum {
    JPG("jpg"),
    
    PNG("png"),
    
    PDF("pdf"),
    
    UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");

    private String value;

    FileTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static FileTypeEnum fromValue(String value) {
      for (FileTypeEnum b : FileTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }
  }

  public static final String JSON_PROPERTY_FILE_TYPE = "file_type";
  private FileTypeEnum fileType;

  public static final String JSON_PROPERTY_TYPE = "type";
  private String type;

  /**
   * The side of the document, if applicable. The possible values are front and back
   */
  public enum SideEnum {
    FRONT("front"),
    
    BACK("back"),
    
    UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");

    private String value;

    SideEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SideEnum fromValue(String value) {
      for (SideEnum b : SideEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }
  }

  public static final String JSON_PROPERTY_SIDE = "side";
  private SideEnum side;

  public static final String JSON_PROPERTY_ISSUING_COUNTRY = "issuing_country";
  private CountryCodes issuingCountry;

  public static final String JSON_PROPERTY_APPLICANT_ID = "applicant_id";
  private UUID applicantId;

  public DocumentShared() { 
  }

  public DocumentShared fileType(FileTypeEnum fileType) {
    this.fileType = fileType;
    return this;
  }

   /**
   * The file type of the uploaded file
   * @return fileType
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FILE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FileTypeEnum getFileType() {
    return fileType;
  }


  @JsonProperty(JSON_PROPERTY_FILE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFileType(FileTypeEnum fileType) {
    this.fileType = fileType;
  }


  public DocumentShared type(String type) {
    this.type = type;
    return this;
  }

   /**
   * The type of document
   * @return type
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(String type) {
    this.type = type;
  }


  public DocumentShared side(SideEnum side) {
    this.side = side;
    return this;
  }

   /**
   * The side of the document, if applicable. The possible values are front and back
   * @return side
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SIDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SideEnum getSide() {
    return side;
  }


  @JsonProperty(JSON_PROPERTY_SIDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSide(SideEnum side) {
    this.side = side;
  }


  public DocumentShared issuingCountry(CountryCodes issuingCountry) {
    this.issuingCountry = issuingCountry;
    return this;
  }

   /**
   * The issuing country of the document, a 3-letter ISO code.
   * @return issuingCountry
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ISSUING_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CountryCodes getIssuingCountry() {
    return issuingCountry;
  }


  @JsonProperty(JSON_PROPERTY_ISSUING_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIssuingCountry(CountryCodes issuingCountry) {
    this.issuingCountry = issuingCountry;
  }


  public DocumentShared applicantId(UUID applicantId) {
    this.applicantId = applicantId;
    return this;
  }

   /**
   * The ID of the applicant whose document is being uploaded.
   * @return applicantId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_APPLICANT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UUID getApplicantId() {
    return applicantId;
  }


  @JsonProperty(JSON_PROPERTY_APPLICANT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setApplicantId(UUID applicantId) {
    this.applicantId = applicantId;
  }


  /**
   * Return true if this document_shared object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentShared documentShared = (DocumentShared) o;
    return Objects.equals(this.fileType, documentShared.fileType) &&
        Objects.equals(this.type, documentShared.type) &&
        Objects.equals(this.side, documentShared.side) &&
        Objects.equals(this.issuingCountry, documentShared.issuingCountry) &&
        Objects.equals(this.applicantId, documentShared.applicantId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileType, type, side, issuingCountry, applicantId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentShared {\n");
    sb.append("    fileType: ").append(toIndentedString(fileType)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    side: ").append(toIndentedString(side)).append("\n");
    sb.append("    issuingCountry: ").append(toIndentedString(issuingCountry)).append("\n");
    sb.append("    applicantId: ").append(toIndentedString(applicantId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

