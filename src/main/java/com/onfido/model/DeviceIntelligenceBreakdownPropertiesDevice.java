/*
 * Onfido API v3.6
 * The Onfido API
 *
 * The version of the OpenAPI document: 3.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.onfido.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.onfido.JSON;


/**
 * DeviceIntelligenceBreakdownPropertiesDevice
 */
@JsonPropertyOrder({
  DeviceIntelligenceBreakdownPropertiesDevice.JSON_PROPERTY_SDK_VERSION,
  DeviceIntelligenceBreakdownPropertiesDevice.JSON_PROPERTY_SDK_SOURCE,
  DeviceIntelligenceBreakdownPropertiesDevice.JSON_PROPERTY_AUTHENTICATION_TYPE,
  DeviceIntelligenceBreakdownPropertiesDevice.JSON_PROPERTY_RAW_MODEL,
  DeviceIntelligenceBreakdownPropertiesDevice.JSON_PROPERTY_OS,
  DeviceIntelligenceBreakdownPropertiesDevice.JSON_PROPERTY_BROWSER,
  DeviceIntelligenceBreakdownPropertiesDevice.JSON_PROPERTY_EMULATOR,
  DeviceIntelligenceBreakdownPropertiesDevice.JSON_PROPERTY_RANDOMIZED_DEVICE,
  DeviceIntelligenceBreakdownPropertiesDevice.JSON_PROPERTY_FAKE_NETWORK_REQUEST,
  DeviceIntelligenceBreakdownPropertiesDevice.JSON_PROPERTY_TRUE_OS,
  DeviceIntelligenceBreakdownPropertiesDevice.JSON_PROPERTY_OS_ANOMALY,
  DeviceIntelligenceBreakdownPropertiesDevice.JSON_PROPERTY_ROOTED,
  DeviceIntelligenceBreakdownPropertiesDevice.JSON_PROPERTY_REMOTE_SOFTWARE,
  DeviceIntelligenceBreakdownPropertiesDevice.JSON_PROPERTY_IP_REPUTATION,
  DeviceIntelligenceBreakdownPropertiesDevice.JSON_PROPERTY_DEVICE_FINGERPRINT_REUSE,
  DeviceIntelligenceBreakdownPropertiesDevice.JSON_PROPERTY_SINGLE_DEVICE_USED,
  DeviceIntelligenceBreakdownPropertiesDevice.JSON_PROPERTY_DOCUMENT_CAPTURE,
  DeviceIntelligenceBreakdownPropertiesDevice.JSON_PROPERTY_BIOMETRIC_CAPTURE
})
@JsonTypeName("device_intelligence_breakdown_properties_device")
@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class DeviceIntelligenceBreakdownPropertiesDevice {
  public static final String JSON_PROPERTY_SDK_VERSION = "sdk_version";
  private String sdkVersion;

  /**
   * The SDK used to upload the media.
   */
  public enum SdkSourceEnum {
    ANDROID_SDK("onfido-android-sdk"),
    
    IOS_SDK("onfido-ios-sdk"),
    
    WEB_SDK("onfido-web-sdk"),
    
    UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");

    private String value;

    SdkSourceEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SdkSourceEnum fromValue(String value) {
      for (SdkSourceEnum b : SdkSourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }
  }

  public static final String JSON_PROPERTY_SDK_SOURCE = "sdk_source";
  private SdkSourceEnum sdkSource;

  /**
   * The token used to authenticate the request.
   */
  public enum AuthenticationTypeEnum {
    SDK_TOKEN("sdk_token"),
    
    MOBILE_TOKEN("mobile_token"),
    
    API_TOKEN("api_token"),
    
    UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");

    private String value;

    AuthenticationTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AuthenticationTypeEnum fromValue(String value) {
      for (AuthenticationTypeEnum b : AuthenticationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }
  }

  public static final String JSON_PROPERTY_AUTHENTICATION_TYPE = "authentication_type";
  private AuthenticationTypeEnum authenticationType;

  public static final String JSON_PROPERTY_RAW_MODEL = "raw_model";
  private String rawModel;

  public static final String JSON_PROPERTY_OS = "os";
  private String os;

  public static final String JSON_PROPERTY_BROWSER = "browser";
  private String browser;

  public static final String JSON_PROPERTY_EMULATOR = "emulator";
  private Boolean emulator;

  public static final String JSON_PROPERTY_RANDOMIZED_DEVICE = "randomized_device";
  private Boolean randomizedDevice;

  public static final String JSON_PROPERTY_FAKE_NETWORK_REQUEST = "fake_network_request";
  private Boolean fakeNetworkRequest;

  public static final String JSON_PROPERTY_TRUE_OS = "true_os";
  private String trueOs;

  public static final String JSON_PROPERTY_OS_ANOMALY = "os_anomaly";
  private String osAnomaly;

  public static final String JSON_PROPERTY_ROOTED = "rooted";
  private Boolean rooted;

  public static final String JSON_PROPERTY_REMOTE_SOFTWARE = "remote_software";
  private Boolean remoteSoftware;

  /**
   * Whether there is highly suspicious traffic related to the IP address. The risk depends on the overall ratio of clear checks on a given IP.
   */
  public enum IpReputationEnum {
    NOT_ENOUGH_DATA("NOT_ENOUGH_DATA"),
    
    HIGH_RISK("HIGH_RISK"),
    
    LOW_RISK("LOW_RISK"),
    
    UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");

    private String value;

    IpReputationEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static IpReputationEnum fromValue(String value) {
      for (IpReputationEnum b : IpReputationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }
  }

  public static final String JSON_PROPERTY_IP_REPUTATION = "ip_reputation";
  private IpReputationEnum ipReputation;

  public static final String JSON_PROPERTY_DEVICE_FINGERPRINT_REUSE = "device_fingerprint_reuse";
  private Integer deviceFingerprintReuse;

  public static final String JSON_PROPERTY_SINGLE_DEVICE_USED = "single_device_used";
  private JsonNullable<Boolean> singleDeviceUsed = JsonNullable.<Boolean>undefined();

  /**
   * Whether the document media were live captured from the device camera.
   */
  public enum DocumentCaptureEnum {
    LIVE("live"),
    
    UNKNOWN_METHOD("unknown_method"),
    
    UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");

    private String value;

    DocumentCaptureEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DocumentCaptureEnum fromValue(String value) {
      for (DocumentCaptureEnum b : DocumentCaptureEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }
  }

  public static final String JSON_PROPERTY_DOCUMENT_CAPTURE = "document_capture";
  private DocumentCaptureEnum documentCapture;

  /**
   * Whether the biometric media were live captured from the device camera.
   */
  public enum BiometricCaptureEnum {
    LIVE("live"),
    
    UNKNOWN_METHOD("unknown_method"),
    
    UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");

    private String value;

    BiometricCaptureEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static BiometricCaptureEnum fromValue(String value) {
      for (BiometricCaptureEnum b : BiometricCaptureEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }
  }

  public static final String JSON_PROPERTY_BIOMETRIC_CAPTURE = "biometric_capture";
  private BiometricCaptureEnum biometricCapture;

  public DeviceIntelligenceBreakdownPropertiesDevice() { 
  }

  public DeviceIntelligenceBreakdownPropertiesDevice sdkVersion(String sdkVersion) {
    this.sdkVersion = sdkVersion;
    return this;
  }

   /**
   * The SDK version that was used.
   * @return sdkVersion
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SDK_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSdkVersion() {
    return sdkVersion;
  }


  @JsonProperty(JSON_PROPERTY_SDK_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSdkVersion(String sdkVersion) {
    this.sdkVersion = sdkVersion;
  }


  public DeviceIntelligenceBreakdownPropertiesDevice sdkSource(SdkSourceEnum sdkSource) {
    this.sdkSource = sdkSource;
    return this;
  }

   /**
   * The SDK used to upload the media.
   * @return sdkSource
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SDK_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SdkSourceEnum getSdkSource() {
    return sdkSource;
  }


  @JsonProperty(JSON_PROPERTY_SDK_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSdkSource(SdkSourceEnum sdkSource) {
    this.sdkSource = sdkSource;
  }


  public DeviceIntelligenceBreakdownPropertiesDevice authenticationType(AuthenticationTypeEnum authenticationType) {
    this.authenticationType = authenticationType;
    return this;
  }

   /**
   * The token used to authenticate the request.
   * @return authenticationType
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUTHENTICATION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AuthenticationTypeEnum getAuthenticationType() {
    return authenticationType;
  }


  @JsonProperty(JSON_PROPERTY_AUTHENTICATION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAuthenticationType(AuthenticationTypeEnum authenticationType) {
    this.authenticationType = authenticationType;
  }


  public DeviceIntelligenceBreakdownPropertiesDevice rawModel(String rawModel) {
    this.rawModel = rawModel;
    return this;
  }

   /**
   * The model as set by the phone manufacturer (for Android and iOS) or the browser manufacturer (for Web). The model can be presented in name or number form depending on each manufacturer implementation.
   * @return rawModel
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RAW_MODEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRawModel() {
    return rawModel;
  }


  @JsonProperty(JSON_PROPERTY_RAW_MODEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRawModel(String rawModel) {
    this.rawModel = rawModel;
  }


  public DeviceIntelligenceBreakdownPropertiesDevice os(String os) {
    this.os = os;
    return this;
  }

   /**
   * The operating system of the device. The value came from manufacturer implementation (for Android and iOS) or browser&#39;s user agent (for Web).
   * @return os
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOs() {
    return os;
  }


  @JsonProperty(JSON_PROPERTY_OS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOs(String os) {
    this.os = os;
  }


  public DeviceIntelligenceBreakdownPropertiesDevice browser(String browser) {
    this.browser = browser;
    return this;
  }

   /**
   * The browser name reported by the browser&#39;s user agent.
   * @return browser
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BROWSER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBrowser() {
    return browser;
  }


  @JsonProperty(JSON_PROPERTY_BROWSER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBrowser(String browser) {
    this.browser = browser;
  }


  public DeviceIntelligenceBreakdownPropertiesDevice emulator(Boolean emulator) {
    this.emulator = emulator;
    return this;
  }

   /**
   * Whether the device is an emulator.
   * @return emulator
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EMULATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEmulator() {
    return emulator;
  }


  @JsonProperty(JSON_PROPERTY_EMULATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEmulator(Boolean emulator) {
    this.emulator = emulator;
  }


  public DeviceIntelligenceBreakdownPropertiesDevice randomizedDevice(Boolean randomizedDevice) {
    this.randomizedDevice = randomizedDevice;
    return this;
  }

   /**
   * Whether the device is providing false randomized device and network information.
   * @return randomizedDevice
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RANDOMIZED_DEVICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getRandomizedDevice() {
    return randomizedDevice;
  }


  @JsonProperty(JSON_PROPERTY_RANDOMIZED_DEVICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRandomizedDevice(Boolean randomizedDevice) {
    this.randomizedDevice = randomizedDevice;
  }


  public DeviceIntelligenceBreakdownPropertiesDevice fakeNetworkRequest(Boolean fakeNetworkRequest) {
    this.fakeNetworkRequest = fakeNetworkRequest;
    return this;
  }

   /**
   * Whether device is using stolen security tokens to send the network information.
   * @return fakeNetworkRequest
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FAKE_NETWORK_REQUEST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getFakeNetworkRequest() {
    return fakeNetworkRequest;
  }


  @JsonProperty(JSON_PROPERTY_FAKE_NETWORK_REQUEST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFakeNetworkRequest(Boolean fakeNetworkRequest) {
    this.fakeNetworkRequest = fakeNetworkRequest;
  }


  public DeviceIntelligenceBreakdownPropertiesDevice trueOs(String trueOs) {
    this.trueOs = trueOs;
    return this;
  }

   /**
   * The true operating system of the device.
   * @return trueOs
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRUE_OS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTrueOs() {
    return trueOs;
  }


  @JsonProperty(JSON_PROPERTY_TRUE_OS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTrueOs(String trueOs) {
    this.trueOs = trueOs;
  }


  public DeviceIntelligenceBreakdownPropertiesDevice osAnomaly(String osAnomaly) {
    this.osAnomaly = osAnomaly;
    return this;
  }

   /**
   * The likelihood of an operating system anomaly between the true OS and the OS sent by the device.
   * @return osAnomaly
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OS_ANOMALY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOsAnomaly() {
    return osAnomaly;
  }


  @JsonProperty(JSON_PROPERTY_OS_ANOMALY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOsAnomaly(String osAnomaly) {
    this.osAnomaly = osAnomaly;
  }


  public DeviceIntelligenceBreakdownPropertiesDevice rooted(Boolean rooted) {
    this.rooted = rooted;
    return this;
  }

   /**
   * Whether the device is rooted.
   * @return rooted
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ROOTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getRooted() {
    return rooted;
  }


  @JsonProperty(JSON_PROPERTY_ROOTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRooted(Boolean rooted) {
    this.rooted = rooted;
  }


  public DeviceIntelligenceBreakdownPropertiesDevice remoteSoftware(Boolean remoteSoftware) {
    this.remoteSoftware = remoteSoftware;
    return this;
  }

   /**
   * Whether the device is controlled via remote software.
   * @return remoteSoftware
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REMOTE_SOFTWARE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getRemoteSoftware() {
    return remoteSoftware;
  }


  @JsonProperty(JSON_PROPERTY_REMOTE_SOFTWARE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRemoteSoftware(Boolean remoteSoftware) {
    this.remoteSoftware = remoteSoftware;
  }


  public DeviceIntelligenceBreakdownPropertiesDevice ipReputation(IpReputationEnum ipReputation) {
    this.ipReputation = ipReputation;
    return this;
  }

   /**
   * Whether there is highly suspicious traffic related to the IP address. The risk depends on the overall ratio of clear checks on a given IP.
   * @return ipReputation
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IP_REPUTATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public IpReputationEnum getIpReputation() {
    return ipReputation;
  }


  @JsonProperty(JSON_PROPERTY_IP_REPUTATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIpReputation(IpReputationEnum ipReputation) {
    this.ipReputation = ipReputation;
  }


  public DeviceIntelligenceBreakdownPropertiesDevice deviceFingerprintReuse(Integer deviceFingerprintReuse) {
    this.deviceFingerprintReuse = deviceFingerprintReuse;
    return this;
  }

   /**
   * The number of times the device was used to create a report for a new applicant. A value greater than 1 indicates potential device reuse.
   * @return deviceFingerprintReuse
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEVICE_FINGERPRINT_REUSE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getDeviceFingerprintReuse() {
    return deviceFingerprintReuse;
  }


  @JsonProperty(JSON_PROPERTY_DEVICE_FINGERPRINT_REUSE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeviceFingerprintReuse(Integer deviceFingerprintReuse) {
    this.deviceFingerprintReuse = deviceFingerprintReuse;
  }


  public DeviceIntelligenceBreakdownPropertiesDevice singleDeviceUsed(Boolean singleDeviceUsed) {
    this.singleDeviceUsed = JsonNullable.<Boolean>of(singleDeviceUsed);
    return this;
  }

   /**
   * Whether the document or biometric media were uploaded from a single device.
   * @return singleDeviceUsed
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Boolean getSingleDeviceUsed() {
        return singleDeviceUsed.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SINGLE_DEVICE_USED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getSingleDeviceUsed_JsonNullable() {
    return singleDeviceUsed;
  }
  
  @JsonProperty(JSON_PROPERTY_SINGLE_DEVICE_USED)
  public void setSingleDeviceUsed_JsonNullable(JsonNullable<Boolean> singleDeviceUsed) {
    this.singleDeviceUsed = singleDeviceUsed;
  }

  public void setSingleDeviceUsed(Boolean singleDeviceUsed) {
    this.singleDeviceUsed = JsonNullable.<Boolean>of(singleDeviceUsed);
  }


  public DeviceIntelligenceBreakdownPropertiesDevice documentCapture(DocumentCaptureEnum documentCapture) {
    this.documentCapture = documentCapture;
    return this;
  }

   /**
   * Whether the document media were live captured from the device camera.
   * @return documentCapture
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DOCUMENT_CAPTURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DocumentCaptureEnum getDocumentCapture() {
    return documentCapture;
  }


  @JsonProperty(JSON_PROPERTY_DOCUMENT_CAPTURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDocumentCapture(DocumentCaptureEnum documentCapture) {
    this.documentCapture = documentCapture;
  }


  public DeviceIntelligenceBreakdownPropertiesDevice biometricCapture(BiometricCaptureEnum biometricCapture) {
    this.biometricCapture = biometricCapture;
    return this;
  }

   /**
   * Whether the biometric media were live captured from the device camera.
   * @return biometricCapture
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BIOMETRIC_CAPTURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BiometricCaptureEnum getBiometricCapture() {
    return biometricCapture;
  }


  @JsonProperty(JSON_PROPERTY_BIOMETRIC_CAPTURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBiometricCapture(BiometricCaptureEnum biometricCapture) {
    this.biometricCapture = biometricCapture;
  }


  /**
   * Return true if this device_intelligence_breakdown_properties_device object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceIntelligenceBreakdownPropertiesDevice deviceIntelligenceBreakdownPropertiesDevice = (DeviceIntelligenceBreakdownPropertiesDevice) o;
    return Objects.equals(this.sdkVersion, deviceIntelligenceBreakdownPropertiesDevice.sdkVersion) &&
        Objects.equals(this.sdkSource, deviceIntelligenceBreakdownPropertiesDevice.sdkSource) &&
        Objects.equals(this.authenticationType, deviceIntelligenceBreakdownPropertiesDevice.authenticationType) &&
        Objects.equals(this.rawModel, deviceIntelligenceBreakdownPropertiesDevice.rawModel) &&
        Objects.equals(this.os, deviceIntelligenceBreakdownPropertiesDevice.os) &&
        Objects.equals(this.browser, deviceIntelligenceBreakdownPropertiesDevice.browser) &&
        Objects.equals(this.emulator, deviceIntelligenceBreakdownPropertiesDevice.emulator) &&
        Objects.equals(this.randomizedDevice, deviceIntelligenceBreakdownPropertiesDevice.randomizedDevice) &&
        Objects.equals(this.fakeNetworkRequest, deviceIntelligenceBreakdownPropertiesDevice.fakeNetworkRequest) &&
        Objects.equals(this.trueOs, deviceIntelligenceBreakdownPropertiesDevice.trueOs) &&
        Objects.equals(this.osAnomaly, deviceIntelligenceBreakdownPropertiesDevice.osAnomaly) &&
        Objects.equals(this.rooted, deviceIntelligenceBreakdownPropertiesDevice.rooted) &&
        Objects.equals(this.remoteSoftware, deviceIntelligenceBreakdownPropertiesDevice.remoteSoftware) &&
        Objects.equals(this.ipReputation, deviceIntelligenceBreakdownPropertiesDevice.ipReputation) &&
        Objects.equals(this.deviceFingerprintReuse, deviceIntelligenceBreakdownPropertiesDevice.deviceFingerprintReuse) &&
        equalsNullable(this.singleDeviceUsed, deviceIntelligenceBreakdownPropertiesDevice.singleDeviceUsed) &&
        Objects.equals(this.documentCapture, deviceIntelligenceBreakdownPropertiesDevice.documentCapture) &&
        Objects.equals(this.biometricCapture, deviceIntelligenceBreakdownPropertiesDevice.biometricCapture);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(sdkVersion, sdkSource, authenticationType, rawModel, os, browser, emulator, randomizedDevice, fakeNetworkRequest, trueOs, osAnomaly, rooted, remoteSoftware, ipReputation, deviceFingerprintReuse, hashCodeNullable(singleDeviceUsed), documentCapture, biometricCapture);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceIntelligenceBreakdownPropertiesDevice {\n");
    sb.append("    sdkVersion: ").append(toIndentedString(sdkVersion)).append("\n");
    sb.append("    sdkSource: ").append(toIndentedString(sdkSource)).append("\n");
    sb.append("    authenticationType: ").append(toIndentedString(authenticationType)).append("\n");
    sb.append("    rawModel: ").append(toIndentedString(rawModel)).append("\n");
    sb.append("    os: ").append(toIndentedString(os)).append("\n");
    sb.append("    browser: ").append(toIndentedString(browser)).append("\n");
    sb.append("    emulator: ").append(toIndentedString(emulator)).append("\n");
    sb.append("    randomizedDevice: ").append(toIndentedString(randomizedDevice)).append("\n");
    sb.append("    fakeNetworkRequest: ").append(toIndentedString(fakeNetworkRequest)).append("\n");
    sb.append("    trueOs: ").append(toIndentedString(trueOs)).append("\n");
    sb.append("    osAnomaly: ").append(toIndentedString(osAnomaly)).append("\n");
    sb.append("    rooted: ").append(toIndentedString(rooted)).append("\n");
    sb.append("    remoteSoftware: ").append(toIndentedString(remoteSoftware)).append("\n");
    sb.append("    ipReputation: ").append(toIndentedString(ipReputation)).append("\n");
    sb.append("    deviceFingerprintReuse: ").append(toIndentedString(deviceFingerprintReuse)).append("\n");
    sb.append("    singleDeviceUsed: ").append(toIndentedString(singleDeviceUsed)).append("\n");
    sb.append("    documentCapture: ").append(toIndentedString(documentCapture)).append("\n");
    sb.append("    biometricCapture: ").append(toIndentedString(biometricCapture)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

