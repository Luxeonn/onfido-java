/*
 * Onfido API v3.6
 * The Onfido API
 *
 * The version of the OpenAPI document: 3.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.onfido.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.onfido.JSON;


/**
 * DocumentCDQReasons
 */
@JsonPropertyOrder({
  DocumentCDQReasons.JSON_PROPERTY_OBSCURED_DATA_POINTS,
  DocumentCDQReasons.JSON_PROPERTY_OBSCURED_SECURITY_FEATURES,
  DocumentCDQReasons.JSON_PROPERTY_ABNORMAL_DOCUMENT_FEATURES,
  DocumentCDQReasons.JSON_PROPERTY_WATERMARKS_DIGITAL_TEXT_OVERLAY,
  DocumentCDQReasons.JSON_PROPERTY_CORNER_REMOVED,
  DocumentCDQReasons.JSON_PROPERTY_PUNCTURED_DOCUMENT,
  DocumentCDQReasons.JSON_PROPERTY_MISSING_BACK,
  DocumentCDQReasons.JSON_PROPERTY_DIGITAL_DOCUMENT
})
@JsonTypeName("document_CDQ_reasons")
@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class DocumentCDQReasons {
  public static final String JSON_PROPERTY_OBSCURED_DATA_POINTS = "obscured_data_points";
  private String obscuredDataPoints;

  public static final String JSON_PROPERTY_OBSCURED_SECURITY_FEATURES = "obscured_security_features";
  private String obscuredSecurityFeatures;

  public static final String JSON_PROPERTY_ABNORMAL_DOCUMENT_FEATURES = "abnormal_document_features";
  private String abnormalDocumentFeatures;

  public static final String JSON_PROPERTY_WATERMARKS_DIGITAL_TEXT_OVERLAY = "watermarks_digital_text_overlay";
  private String watermarksDigitalTextOverlay;

  public static final String JSON_PROPERTY_CORNER_REMOVED = "corner_removed";
  private String cornerRemoved;

  public static final String JSON_PROPERTY_PUNCTURED_DOCUMENT = "punctured_document";
  private String puncturedDocument;

  public static final String JSON_PROPERTY_MISSING_BACK = "missing_back";
  private String missingBack;

  public static final String JSON_PROPERTY_DIGITAL_DOCUMENT = "digital_document";
  private String digitalDocument;

  public DocumentCDQReasons() { 
  }

  public DocumentCDQReasons obscuredDataPoints(String obscuredDataPoints) {
    this.obscuredDataPoints = obscuredDataPoints;
    return this;
  }

   /**
   * When data points are obscured to the point that we cannot confirm if the fonts match the expected ones.
   * @return obscuredDataPoints
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OBSCURED_DATA_POINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getObscuredDataPoints() {
    return obscuredDataPoints;
  }


  @JsonProperty(JSON_PROPERTY_OBSCURED_DATA_POINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setObscuredDataPoints(String obscuredDataPoints) {
    this.obscuredDataPoints = obscuredDataPoints;
  }


  public DocumentCDQReasons obscuredSecurityFeatures(String obscuredSecurityFeatures) {
    this.obscuredSecurityFeatures = obscuredSecurityFeatures;
    return this;
  }

   /**
   * When a critical security feature is obscured. This can also refer to when the holder&#39;s wet signature, necessary for the document to be valid, is not present.
   * @return obscuredSecurityFeatures
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OBSCURED_SECURITY_FEATURES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getObscuredSecurityFeatures() {
    return obscuredSecurityFeatures;
  }


  @JsonProperty(JSON_PROPERTY_OBSCURED_SECURITY_FEATURES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setObscuredSecurityFeatures(String obscuredSecurityFeatures) {
    this.obscuredSecurityFeatures = obscuredSecurityFeatures;
  }


  public DocumentCDQReasons abnormalDocumentFeatures(String abnormalDocumentFeatures) {
    this.abnormalDocumentFeatures = abnormalDocumentFeatures;
    return this;
  }

   /**
   * One of 3 reasons (1) OCR Assisted Scans (i.e. when you&#39;re able to move the mouse and highlight part of text), (2) Severely Washed out Background, (3) Overlapping Text.
   * @return abnormalDocumentFeatures
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ABNORMAL_DOCUMENT_FEATURES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAbnormalDocumentFeatures() {
    return abnormalDocumentFeatures;
  }


  @JsonProperty(JSON_PROPERTY_ABNORMAL_DOCUMENT_FEATURES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAbnormalDocumentFeatures(String abnormalDocumentFeatures) {
    this.abnormalDocumentFeatures = abnormalDocumentFeatures;
  }


  public DocumentCDQReasons watermarksDigitalTextOverlay(String watermarksDigitalTextOverlay) {
    this.watermarksDigitalTextOverlay = watermarksDigitalTextOverlay;
    return this;
  }

   /**
   * Any digital text or electronic watermarks on the document.
   * @return watermarksDigitalTextOverlay
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WATERMARKS_DIGITAL_TEXT_OVERLAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getWatermarksDigitalTextOverlay() {
    return watermarksDigitalTextOverlay;
  }


  @JsonProperty(JSON_PROPERTY_WATERMARKS_DIGITAL_TEXT_OVERLAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWatermarksDigitalTextOverlay(String watermarksDigitalTextOverlay) {
    this.watermarksDigitalTextOverlay = watermarksDigitalTextOverlay;
  }


  public DocumentCDQReasons cornerRemoved(String cornerRemoved) {
    this.cornerRemoved = cornerRemoved;
    return this;
  }

   /**
   * If the corner has been physically cut off. This can be found on some documents that are no longer valid.
   * @return cornerRemoved
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CORNER_REMOVED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCornerRemoved() {
    return cornerRemoved;
  }


  @JsonProperty(JSON_PROPERTY_CORNER_REMOVED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCornerRemoved(String cornerRemoved) {
    this.cornerRemoved = cornerRemoved;
  }


  public DocumentCDQReasons puncturedDocument(String puncturedDocument) {
    this.puncturedDocument = puncturedDocument;
    return this;
  }

   /**
   * A punched hole is present.
   * @return puncturedDocument
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PUNCTURED_DOCUMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPuncturedDocument() {
    return puncturedDocument;
  }


  @JsonProperty(JSON_PROPERTY_PUNCTURED_DOCUMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPuncturedDocument(String puncturedDocument) {
    this.puncturedDocument = puncturedDocument;
  }


  public DocumentCDQReasons missingBack(String missingBack) {
    this.missingBack = missingBack;
    return this;
  }

   /**
   * When the back of a document is needed for processing, but is not available.
   * @return missingBack
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MISSING_BACK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMissingBack() {
    return missingBack;
  }


  @JsonProperty(JSON_PROPERTY_MISSING_BACK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMissingBack(String missingBack) {
    this.missingBack = missingBack;
  }


  public DocumentCDQReasons digitalDocument(String digitalDocument) {
    this.digitalDocument = digitalDocument;
    return this;
  }

   /**
   * When a document has been published digitally, there aren&#39;t enough security features to review so we cannot perform a full fraud assessment.
   * @return digitalDocument
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DIGITAL_DOCUMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDigitalDocument() {
    return digitalDocument;
  }


  @JsonProperty(JSON_PROPERTY_DIGITAL_DOCUMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDigitalDocument(String digitalDocument) {
    this.digitalDocument = digitalDocument;
  }


  /**
   * Return true if this document_CDQ_reasons object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentCDQReasons documentCDQReasons = (DocumentCDQReasons) o;
    return Objects.equals(this.obscuredDataPoints, documentCDQReasons.obscuredDataPoints) &&
        Objects.equals(this.obscuredSecurityFeatures, documentCDQReasons.obscuredSecurityFeatures) &&
        Objects.equals(this.abnormalDocumentFeatures, documentCDQReasons.abnormalDocumentFeatures) &&
        Objects.equals(this.watermarksDigitalTextOverlay, documentCDQReasons.watermarksDigitalTextOverlay) &&
        Objects.equals(this.cornerRemoved, documentCDQReasons.cornerRemoved) &&
        Objects.equals(this.puncturedDocument, documentCDQReasons.puncturedDocument) &&
        Objects.equals(this.missingBack, documentCDQReasons.missingBack) &&
        Objects.equals(this.digitalDocument, documentCDQReasons.digitalDocument);
  }

  @Override
  public int hashCode() {
    return Objects.hash(obscuredDataPoints, obscuredSecurityFeatures, abnormalDocumentFeatures, watermarksDigitalTextOverlay, cornerRemoved, puncturedDocument, missingBack, digitalDocument);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentCDQReasons {\n");
    sb.append("    obscuredDataPoints: ").append(toIndentedString(obscuredDataPoints)).append("\n");
    sb.append("    obscuredSecurityFeatures: ").append(toIndentedString(obscuredSecurityFeatures)).append("\n");
    sb.append("    abnormalDocumentFeatures: ").append(toIndentedString(abnormalDocumentFeatures)).append("\n");
    sb.append("    watermarksDigitalTextOverlay: ").append(toIndentedString(watermarksDigitalTextOverlay)).append("\n");
    sb.append("    cornerRemoved: ").append(toIndentedString(cornerRemoved)).append("\n");
    sb.append("    puncturedDocument: ").append(toIndentedString(puncturedDocument)).append("\n");
    sb.append("    missingBack: ").append(toIndentedString(missingBack)).append("\n");
    sb.append("    digitalDocument: ").append(toIndentedString(digitalDocument)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

