/*
 * Onfido API v3.6
 * The Onfido API
 *
 * The version of the OpenAPI document: 3.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.onfido.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.onfido.JSON;


/**
 * DocumentIQReasons
 */
@JsonPropertyOrder({
  DocumentIQReasons.JSON_PROPERTY_DARK_PHOTO,
  DocumentIQReasons.JSON_PROPERTY_GLARE_ON_PHOTO,
  DocumentIQReasons.JSON_PROPERTY_BLURRED_PHOTO,
  DocumentIQReasons.JSON_PROPERTY_COVERED_PHOTO,
  DocumentIQReasons.JSON_PROPERTY_OTHER_PHOTO_ISSUE,
  DocumentIQReasons.JSON_PROPERTY_DAMAGED_DOCUMENT,
  DocumentIQReasons.JSON_PROPERTY_INCORRECT_SIDE,
  DocumentIQReasons.JSON_PROPERTY_CUT_OFF_DOCUMENT,
  DocumentIQReasons.JSON_PROPERTY_NO_DOCUMENT_IN_IMAGE,
  DocumentIQReasons.JSON_PROPERTY_TWO_DOCUMENTS_UPLOADED
})
@JsonTypeName("document_IQ_reasons")
@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class DocumentIQReasons {
  public static final String JSON_PROPERTY_DARK_PHOTO = "dark_photo";
  private String darkPhoto;

  public static final String JSON_PROPERTY_GLARE_ON_PHOTO = "glare_on_photo";
  private String glareOnPhoto;

  public static final String JSON_PROPERTY_BLURRED_PHOTO = "blurred_photo";
  private String blurredPhoto;

  public static final String JSON_PROPERTY_COVERED_PHOTO = "covered_photo";
  private String coveredPhoto;

  public static final String JSON_PROPERTY_OTHER_PHOTO_ISSUE = "other_photo_issue";
  private String otherPhotoIssue;

  public static final String JSON_PROPERTY_DAMAGED_DOCUMENT = "damaged_document";
  private String damagedDocument;

  public static final String JSON_PROPERTY_INCORRECT_SIDE = "incorrect_side";
  private String incorrectSide;

  public static final String JSON_PROPERTY_CUT_OFF_DOCUMENT = "cut_off_document";
  private String cutOffDocument;

  public static final String JSON_PROPERTY_NO_DOCUMENT_IN_IMAGE = "no_document_in_image";
  private String noDocumentInImage;

  public static final String JSON_PROPERTY_TWO_DOCUMENTS_UPLOADED = "two_documents_uploaded";
  private String twoDocumentsUploaded;

  public DocumentIQReasons() { 
  }

  public DocumentIQReasons darkPhoto(String darkPhoto) {
    this.darkPhoto = darkPhoto;
    return this;
  }

   /**
   * When an image of the document is too dark to be able to see data points.
   * @return darkPhoto
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DARK_PHOTO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDarkPhoto() {
    return darkPhoto;
  }


  @JsonProperty(JSON_PROPERTY_DARK_PHOTO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDarkPhoto(String darkPhoto) {
    this.darkPhoto = darkPhoto;
  }


  public DocumentIQReasons glareOnPhoto(String glareOnPhoto) {
    this.glareOnPhoto = glareOnPhoto;
    return this;
  }

   /**
   * When there is light reflecting on the document causing glare to obstruct data points.
   * @return glareOnPhoto
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GLARE_ON_PHOTO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getGlareOnPhoto() {
    return glareOnPhoto;
  }


  @JsonProperty(JSON_PROPERTY_GLARE_ON_PHOTO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGlareOnPhoto(String glareOnPhoto) {
    this.glareOnPhoto = glareOnPhoto;
  }


  public DocumentIQReasons blurredPhoto(String blurredPhoto) {
    this.blurredPhoto = blurredPhoto;
    return this;
  }

   /**
   * When data points are blurred and no reference can be made elsewhere in the document or if the data points are too blurry and &#39;they could be something else&#39;.
   * @return blurredPhoto
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BLURRED_PHOTO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBlurredPhoto() {
    return blurredPhoto;
  }


  @JsonProperty(JSON_PROPERTY_BLURRED_PHOTO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBlurredPhoto(String blurredPhoto) {
    this.blurredPhoto = blurredPhoto;
  }


  public DocumentIQReasons coveredPhoto(String coveredPhoto) {
    this.coveredPhoto = coveredPhoto;
    return this;
  }

   /**
   * When data points have been covered either by the applicant or by another object such as a sticker.
   * @return coveredPhoto
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COVERED_PHOTO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCoveredPhoto() {
    return coveredPhoto;
  }


  @JsonProperty(JSON_PROPERTY_COVERED_PHOTO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCoveredPhoto(String coveredPhoto) {
    this.coveredPhoto = coveredPhoto;
  }


  public DocumentIQReasons otherPhotoIssue(String otherPhotoIssue) {
    this.otherPhotoIssue = otherPhotoIssue;
    return this;
  }

   /**
   * Any other reason not listed, such as when holograms are obscuring data points.
   * @return otherPhotoIssue
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OTHER_PHOTO_ISSUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOtherPhotoIssue() {
    return otherPhotoIssue;
  }


  @JsonProperty(JSON_PROPERTY_OTHER_PHOTO_ISSUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOtherPhotoIssue(String otherPhotoIssue) {
    this.otherPhotoIssue = otherPhotoIssue;
  }


  public DocumentIQReasons damagedDocument(String damagedDocument) {
    this.damagedDocument = damagedDocument;
    return this;
  }

   /**
   * When a document is damaged and we are unable to make out data points.
   * @return damagedDocument
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DAMAGED_DOCUMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDamagedDocument() {
    return damagedDocument;
  }


  @JsonProperty(JSON_PROPERTY_DAMAGED_DOCUMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDamagedDocument(String damagedDocument) {
    this.damagedDocument = damagedDocument;
  }


  public DocumentIQReasons incorrectSide(String incorrectSide) {
    this.incorrectSide = incorrectSide;
    return this;
  }

   /**
   * When the incorrect side of a document has been uploaded, and we have not received the front.
   * @return incorrectSide
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INCORRECT_SIDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIncorrectSide() {
    return incorrectSide;
  }


  @JsonProperty(JSON_PROPERTY_INCORRECT_SIDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIncorrectSide(String incorrectSide) {
    this.incorrectSide = incorrectSide;
  }


  public DocumentIQReasons cutOffDocument(String cutOffDocument) {
    this.cutOffDocument = cutOffDocument;
    return this;
  }

   /**
   * When data points are not included in the image due to the document being cut off.
   * @return cutOffDocument
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CUT_OFF_DOCUMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCutOffDocument() {
    return cutOffDocument;
  }


  @JsonProperty(JSON_PROPERTY_CUT_OFF_DOCUMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCutOffDocument(String cutOffDocument) {
    this.cutOffDocument = cutOffDocument;
  }


  public DocumentIQReasons noDocumentInImage(String noDocumentInImage) {
    this.noDocumentInImage = noDocumentInImage;
    return this;
  }

   /**
   * If no document has been uploaded or there is a blank image.
   * @return noDocumentInImage
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NO_DOCUMENT_IN_IMAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNoDocumentInImage() {
    return noDocumentInImage;
  }


  @JsonProperty(JSON_PROPERTY_NO_DOCUMENT_IN_IMAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNoDocumentInImage(String noDocumentInImage) {
    this.noDocumentInImage = noDocumentInImage;
  }


  public DocumentIQReasons twoDocumentsUploaded(String twoDocumentsUploaded) {
    this.twoDocumentsUploaded = twoDocumentsUploaded;
    return this;
  }

   /**
   * When 2 different documents are submitted in the same check.
   * @return twoDocumentsUploaded
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TWO_DOCUMENTS_UPLOADED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTwoDocumentsUploaded() {
    return twoDocumentsUploaded;
  }


  @JsonProperty(JSON_PROPERTY_TWO_DOCUMENTS_UPLOADED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTwoDocumentsUploaded(String twoDocumentsUploaded) {
    this.twoDocumentsUploaded = twoDocumentsUploaded;
  }


  /**
   * Return true if this document_IQ_reasons object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentIQReasons documentIQReasons = (DocumentIQReasons) o;
    return Objects.equals(this.darkPhoto, documentIQReasons.darkPhoto) &&
        Objects.equals(this.glareOnPhoto, documentIQReasons.glareOnPhoto) &&
        Objects.equals(this.blurredPhoto, documentIQReasons.blurredPhoto) &&
        Objects.equals(this.coveredPhoto, documentIQReasons.coveredPhoto) &&
        Objects.equals(this.otherPhotoIssue, documentIQReasons.otherPhotoIssue) &&
        Objects.equals(this.damagedDocument, documentIQReasons.damagedDocument) &&
        Objects.equals(this.incorrectSide, documentIQReasons.incorrectSide) &&
        Objects.equals(this.cutOffDocument, documentIQReasons.cutOffDocument) &&
        Objects.equals(this.noDocumentInImage, documentIQReasons.noDocumentInImage) &&
        Objects.equals(this.twoDocumentsUploaded, documentIQReasons.twoDocumentsUploaded);
  }

  @Override
  public int hashCode() {
    return Objects.hash(darkPhoto, glareOnPhoto, blurredPhoto, coveredPhoto, otherPhotoIssue, damagedDocument, incorrectSide, cutOffDocument, noDocumentInImage, twoDocumentsUploaded);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentIQReasons {\n");
    sb.append("    darkPhoto: ").append(toIndentedString(darkPhoto)).append("\n");
    sb.append("    glareOnPhoto: ").append(toIndentedString(glareOnPhoto)).append("\n");
    sb.append("    blurredPhoto: ").append(toIndentedString(blurredPhoto)).append("\n");
    sb.append("    coveredPhoto: ").append(toIndentedString(coveredPhoto)).append("\n");
    sb.append("    otherPhotoIssue: ").append(toIndentedString(otherPhotoIssue)).append("\n");
    sb.append("    damagedDocument: ").append(toIndentedString(damagedDocument)).append("\n");
    sb.append("    incorrectSide: ").append(toIndentedString(incorrectSide)).append("\n");
    sb.append("    cutOffDocument: ").append(toIndentedString(cutOffDocument)).append("\n");
    sb.append("    noDocumentInImage: ").append(toIndentedString(noDocumentInImage)).append("\n");
    sb.append("    twoDocumentsUploaded: ").append(toIndentedString(twoDocumentsUploaded)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

