/*
 * Onfido API v3.6
 * The Onfido API
 *
 * The version of the OpenAPI document: 3.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.onfido.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.onfido.JSON;


/**
 * CheckShared
 */
@JsonPropertyOrder({
  CheckShared.JSON_PROPERTY_WEBHOOK_IDS,
  CheckShared.JSON_PROPERTY_APPLICANT_ID,
  CheckShared.JSON_PROPERTY_APPLICANT_PROVIDES_DATA,
  CheckShared.JSON_PROPERTY_TAGS,
  CheckShared.JSON_PROPERTY_REDIRECT_URI
})
@JsonTypeName("check_shared")
@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CheckShared {
  public static final String JSON_PROPERTY_WEBHOOK_IDS = "webhook_ids";
  private List<String> webhookIds;

  public static final String JSON_PROPERTY_APPLICANT_ID = "applicant_id";
  private UUID applicantId;

  public static final String JSON_PROPERTY_APPLICANT_PROVIDES_DATA = "applicant_provides_data";
  private Boolean applicantProvidesData;

  public static final String JSON_PROPERTY_TAGS = "tags";
  private List<String> tags;

  public static final String JSON_PROPERTY_REDIRECT_URI = "redirect_uri";
  private String redirectUri;

  public CheckShared() { 
  }

  public CheckShared webhookIds(List<String> webhookIds) {
    this.webhookIds = webhookIds;
    return this;
  }

  public CheckShared addWebhookIdsItem(String webhookIdsItem) {
    if (this.webhookIds == null) {
      this.webhookIds = new ArrayList<>();
    }
    this.webhookIds.add(webhookIdsItem);
    return this;
  }

   /**
   * An array of webhook ids describing which webhooks to trigger for this check.
   * @return webhookIds
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WEBHOOK_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getWebhookIds() {
    return webhookIds;
  }


  @JsonProperty(JSON_PROPERTY_WEBHOOK_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWebhookIds(List<String> webhookIds) {
    this.webhookIds = webhookIds;
  }


  public CheckShared applicantId(UUID applicantId) {
    this.applicantId = applicantId;
    return this;
  }

   /**
   * The ID of the applicant to do the check on.
   * @return applicantId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_APPLICANT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getApplicantId() {
    return applicantId;
  }


  @JsonProperty(JSON_PROPERTY_APPLICANT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setApplicantId(UUID applicantId) {
    this.applicantId = applicantId;
  }


  public CheckShared applicantProvidesData(Boolean applicantProvidesData) {
    this.applicantProvidesData = applicantProvidesData;
    return this;
  }

   /**
   * Send an applicant form to applicant to complete to proceed with check. Defaults to false. 
   * @return applicantProvidesData
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_APPLICANT_PROVIDES_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getApplicantProvidesData() {
    return applicantProvidesData;
  }


  @JsonProperty(JSON_PROPERTY_APPLICANT_PROVIDES_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setApplicantProvidesData(Boolean applicantProvidesData) {
    this.applicantProvidesData = applicantProvidesData;
  }


  public CheckShared tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public CheckShared addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Array of tags being assigned to this check.
   * @return tags
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getTags() {
    return tags;
  }


  @JsonProperty(JSON_PROPERTY_TAGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public CheckShared redirectUri(String redirectUri) {
    this.redirectUri = redirectUri;
    return this;
  }

   /**
   * For checks where &#x60;applicant_provides_data&#x60; is &#x60;true&#x60;, redirect to this URI when the applicant has submitted their data.
   * @return redirectUri
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REDIRECT_URI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRedirectUri() {
    return redirectUri;
  }


  @JsonProperty(JSON_PROPERTY_REDIRECT_URI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRedirectUri(String redirectUri) {
    this.redirectUri = redirectUri;
  }


  /**
   * Return true if this check_shared object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckShared checkShared = (CheckShared) o;
    return Objects.equals(this.webhookIds, checkShared.webhookIds) &&
        Objects.equals(this.applicantId, checkShared.applicantId) &&
        Objects.equals(this.applicantProvidesData, checkShared.applicantProvidesData) &&
        Objects.equals(this.tags, checkShared.tags) &&
        Objects.equals(this.redirectUri, checkShared.redirectUri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(webhookIds, applicantId, applicantProvidesData, tags, redirectUri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckShared {\n");
    sb.append("    webhookIds: ").append(toIndentedString(webhookIds)).append("\n");
    sb.append("    applicantId: ").append(toIndentedString(applicantId)).append("\n");
    sb.append("    applicantProvidesData: ").append(toIndentedString(applicantProvidesData)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    redirectUri: ").append(toIndentedString(redirectUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

