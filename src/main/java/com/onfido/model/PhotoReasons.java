/*
 * Onfido API v3.6
 * The Onfido API
 *
 * The version of the OpenAPI document: 3.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.onfido.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.onfido.JSON;


/**
 * PhotoReasons
 */
@JsonPropertyOrder({
  PhotoReasons.JSON_PROPERTY_DIGITAL_TAMPERING,
  PhotoReasons.JSON_PROPERTY_FAKE_WEBCAM,
  PhotoReasons.JSON_PROPERTY_TIME_OF_CAPTURE,
  PhotoReasons.JSON_PROPERTY_EMULATOR,
  PhotoReasons.JSON_PROPERTY_REASONS
})
@JsonTypeName("photo_reasons")
@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PhotoReasons {
  public static final String JSON_PROPERTY_DIGITAL_TAMPERING = "digital_tampering";
  private String digitalTampering;

  public static final String JSON_PROPERTY_FAKE_WEBCAM = "fake_webcam";
  private String fakeWebcam;

  public static final String JSON_PROPERTY_TIME_OF_CAPTURE = "time_of_capture";
  private String timeOfCapture;

  public static final String JSON_PROPERTY_EMULATOR = "emulator";
  private String emulator;

  public static final String JSON_PROPERTY_REASONS = "reasons";
  private String reasons;

  public PhotoReasons() { 
  }

  public PhotoReasons digitalTampering(String digitalTampering) {
    this.digitalTampering = digitalTampering;
    return this;
  }

   /**
   * Flags when evidence is found that the image was manipulated by Photoshop, or other software.
   * @return digitalTampering
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DIGITAL_TAMPERING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDigitalTampering() {
    return digitalTampering;
  }


  @JsonProperty(JSON_PROPERTY_DIGITAL_TAMPERING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDigitalTampering(String digitalTampering) {
    this.digitalTampering = digitalTampering;
  }


  public PhotoReasons fakeWebcam(String fakeWebcam) {
    this.fakeWebcam = fakeWebcam;
    return this;
  }

   /**
   * Flags when evidence is found that a fake webcam was used.
   * @return fakeWebcam
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FAKE_WEBCAM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFakeWebcam() {
    return fakeWebcam;
  }


  @JsonProperty(JSON_PROPERTY_FAKE_WEBCAM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFakeWebcam(String fakeWebcam) {
    this.fakeWebcam = fakeWebcam;
  }


  public PhotoReasons timeOfCapture(String timeOfCapture) {
    this.timeOfCapture = timeOfCapture;
    return this;
  }

   /**
   * Flags when evidence is found that the live photo was taken more than 24 hours before live photo upload.
   * @return timeOfCapture
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TIME_OF_CAPTURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTimeOfCapture() {
    return timeOfCapture;
  }


  @JsonProperty(JSON_PROPERTY_TIME_OF_CAPTURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTimeOfCapture(String timeOfCapture) {
    this.timeOfCapture = timeOfCapture;
  }


  public PhotoReasons emulator(String emulator) {
    this.emulator = emulator;
    return this;
  }

   /**
   * Flags when evidence is found that an Android emulator was used.
   * @return emulator
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EMULATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEmulator() {
    return emulator;
  }


  @JsonProperty(JSON_PROPERTY_EMULATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEmulator(String emulator) {
    this.emulator = emulator;
  }


  public PhotoReasons reasons(String reasons) {
    this.reasons = reasons;
    return this;
  }

   /**
   * Additional comma separated details such as the exact digital tampering software used, or the name of the fake webcam.
   * @return reasons
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REASONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getReasons() {
    return reasons;
  }


  @JsonProperty(JSON_PROPERTY_REASONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReasons(String reasons) {
    this.reasons = reasons;
  }


  /**
   * Return true if this photo_reasons object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PhotoReasons photoReasons = (PhotoReasons) o;
    return Objects.equals(this.digitalTampering, photoReasons.digitalTampering) &&
        Objects.equals(this.fakeWebcam, photoReasons.fakeWebcam) &&
        Objects.equals(this.timeOfCapture, photoReasons.timeOfCapture) &&
        Objects.equals(this.emulator, photoReasons.emulator) &&
        Objects.equals(this.reasons, photoReasons.reasons);
  }

  @Override
  public int hashCode() {
    return Objects.hash(digitalTampering, fakeWebcam, timeOfCapture, emulator, reasons);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PhotoReasons {\n");
    sb.append("    digitalTampering: ").append(toIndentedString(digitalTampering)).append("\n");
    sb.append("    fakeWebcam: ").append(toIndentedString(fakeWebcam)).append("\n");
    sb.append("    timeOfCapture: ").append(toIndentedString(timeOfCapture)).append("\n");
    sb.append("    emulator: ").append(toIndentedString(emulator)).append("\n");
    sb.append("    reasons: ").append(toIndentedString(reasons)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

